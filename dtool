#!/usr/bin/php
<?php 

/* VERSION: 2.7.2 */

function get_dirlist($odir, $depth = 0, $searchfile = 'settings.php', $maxdepth = 1)
{
	global $dircount, $flags;

	$dircount++;

	if($dircount > 1500) {
		echo "Too many directories to search.\nTry changing to the vhost root directory itself.\n";
		exit;
	}
	if($depth > $maxdepth) {
		return array();
	}
	$dirs = glob($odir . '/*');
	$output = array();
	foreach($dirs as $dir) {
		if(is_dir($dir)) {
			$output = array_merge($output, get_dirlist($dir, $depth + 1, $searchfile, $maxdepth));
		}
		if (basename($dir) == $searchfile) {
			$output[] = $odir;
		}
	}
	return $output;
}

$args = $argv;

$script = basename(array_shift($args)); // Remove the command
$flags = array();
for($z = count($args) - 1; $z >= 0; $z--) {
	if(preg_match('%^--([^=]+)(?:=(.+))?$%', $args[$z], $matches))
	{
		if(!isset($matches[2])) {
			$matches[2] = true;
		}
		$flags[$matches[1]] = $matches[2];
		unset($args[$z]);
	}
}

$cwd = getcwd();
if(isset($flags['settings'])) {
	$settings = array($flags['settings']);
}
else {
	$settings = get_dirlist($cwd);
}
if(count($settings)) {
	$settings = array_combine(array_map('basename', $settings), $settings);
}


if(isset($flags['showargs'])) {
	foreach($flags as $key => $value) {
		echo "{$key} = {$value}\n";
	}
}

if(count($args) == 0) {
	$args = array('help');
}

$command = reset($args);
if(count($args) > 1) {
	$site = end($args);	
	if(!in_array($site, array_keys($settings))) {
		$site = '';
	}
}
else {
	$site = '';
}

if(isset($flags['site'])) {
	$site = $flags['site'];
}


function connect($mustconnect = true){
	global $settings, $site, $user, $password, $server, $database, $flags;
	
	if(isset($flags['dbuser'])) {
		$user = $flags['dbuser'];
		$password = '';
		$server = 'localhost';
		$database = '';
	}
	if(isset($flags['dbpass'])) {
		$password = $flags['dbpass'];
	}
	if(isset($flags['dbserver'])) {
		$server = $flags['dbserver'];
	}
	if(isset($flags['dbname'])) {
		$database = $flags['dbname'];
	}
	
	if($site == '' && count($settings) == 1) {
		$site = key($settings);
	}
	elseif($site == '' && count($settings) > 1) {
		echo "There are multiple settings files availalbe here.\nPlease choose one to pass in via the site parameter:\n";
		foreach($settings as $site => $dir) {
			echo "  $site\n";
		}
		exit;
	}

	if($user == '') {
		$drupal_settings = $site . '/settings.php';
		if(!file_exists($drupal_settings)) {
			echo "Tried to open {$drupal_settings} but failed because file_exists() returned false.\nCurrent directory: " . getcwd() . "\n";
			exit;
		}
	
		if(isset($flags['civi'])) {
			$db_url = file_get_contents($drupal_settings);
			if(!preg_match('%mysqli?://(?P<user>[^:]+)(?::(?P<password>[^@]*?))?@(?P<server>[^/]+)/(?P<database>[^@\'"]+)$%', $db_url, $dp)) {
				echo "Couldn't parse the settings file.\n\$db_url := {$db_url}\n";
				exit;
			}
		}
		else {
			include($drupal_settings);
			
			if(isset($db_url) && is_array($db_url)) {
				$db_url = $db_url['default'];
			}
			if(isset($db_url)) {
				if(!preg_match('%mysqli?://(?P<user>[^:]+)(?::(?P<password>[^@]*?))?@(?P<server>[^/]+)/(?P<database>[^@\'"]+)$%', $db_url, $dp)) {
					echo "Couldn't parse the settings file.\n\$db_url := {$db_url}\n";
					exit;
				}
			}
			if(isset($databases) && is_array($databases)) {
				$dp['password'] = $databases['default']['default']['password'];
				$dp['user'] = $databases['default']['default']['username'];
				$dp['server'] = $databases['default']['default']['host'];
				$dp['database'] = $databases['default']['default']['database'];
			}
		}

		extract($dp);
	}
	
	if($mustconnect) {
		$conn = @mysql_connect($server, $user, $password);
		if(!$conn) {
			$err = mysql_error();
			echo "This command only works on sites with live databases.\nServer: {$server}\nUsername: {$user}\nPassword:{$password}\nErr:{$err}\n";
			exit;
		}
		mysql_select_db($database);
		return $conn;
	}
}

function commands_only($fn){
	return strpos($fn, 'cmd_') === 0;
}

function help_only($fns){
	return strpos($fns, 'hlp_') === 0;
}

function rsum($a, $b) {
	return $a + $b;
}

function as_table($oa){
	$first = reset($oa);
	if(!is_array($first)) {
		echo 'No results.';
		return;
	}
	$fieldnames = array_keys($first);
	$fields = array();
	foreach($fieldnames as $field) {
		$fields[$field] = strlen($field);
	}
	foreach($oa as $r) {
		foreach($fieldnames as $field) {
			if(isset($r[$field])) {
				$fields[$field] = max($fields[$field], strlen($r[$field]));
				$fields[$field] = min($fields[$field], 40);  // This should be smarter
			}
		}
	}
	$fieldswidth = array_reduce($fields, 'rsum', 0);
	
	echo '  ';
	foreach($fieldnames as $field) {
		echo '+' . str_repeat('-', $fields[$field] + 2);
	}
	echo "+\n";
	echo '  ';
	foreach($fieldnames as $field) {
		echo '| ' . str_pad($field, $fields[$field] + 1);
	}
	echo "|\n";
	echo '  ';
	foreach($fieldnames as $field) {
		echo '+' . str_repeat('-', $fields[$field] + 2);
	}
	echo "+\n";

	foreach($oa as $r) {
		$goagain = false;
		do {
			if($goagain) {
				echo '  ';
			}
			else {
				echo '# ';
			}
			$goagain = false;
			foreach($fieldnames as $field) {
				$out = substr($r[$field], 0, $fields[$field]);
				$r[$field] = substr($r[$field], $fields[$field]);
				$out = preg_replace('#[\n\r\s]#i', ' ', $out);
				echo '| ' . str_pad($out, $fields[$field] + 1);
				if(strlen($r[$field]) > 0) {
					$goagain = true;
				}
			}
			echo "|\n";
		} while($goagain);
	}
	echo '  ';
	foreach($fieldnames as $field) {
		echo '+' . str_repeat('-', $fields[$field] + 2);
	}
	echo "+\n";
}

$fns = get_defined_functions();
$fns = array_filter($fns['user'], 'commands_only');

if(!in_array('cmd_' . $command, $fns)) {
	echo "Command '{$command}' is unknown\n";
	$command = 'help';
	$site = '';
}

$fn = 'cmd_' . $command;
$fn();


function cmd_help(){
	global $settings, $site, $script, $args;
	
	echo "\n";
	
	if(isset($args[1]) && $args[1] != '') {
		$fns = get_defined_functions();
		$fns = array_filter($fns['user'], 'help_only');
		if(!in_array('hlp_' . $args[1], $fns)) {
			echo "Help for command '{$args[1]}' is unknown\n";
			$command = 'help';
			exit;
		}

		$fn = 'hlp_' . $args[1];
		$fn();
		echo "\n";
		exit;
	}
	
	echo 
"Usage: {$script} command [site]
  Where 'command' is one of:   ";
	$fns = get_defined_functions();
	$fns = array_filter($fns['user'], 'commands_only');
	sort($fns);
	$comma = '';
	foreach($fns as $fn) {
		$fn = substr($fn, 4);
		echo "{$comma}{$fn}";
		$comma = ', ';
	}
	
	echo "\n  Get additional help by providing the command as a parameter to the help command, like:\n  {$script} help dump\n";
	
	echo "\n  Most commands require a site name or a single Drupal site to be present in the current directory.\n";
	if(count($settings)) {
		echo "  These are valid in the current directory:\n";
		foreach($settings as $site => $dir) {
			echo "    $site\n";
		}
	}
	else {
		echo "  There are no valid sites in your current directory.\n";
	}
	echo "\n";
	echo "dtool is located here: " . __FILE__ . "\n";

	$old = file_get_contents(__FILE__);
	
	preg_match('%/\*\s*VERSION:\s*([0-9.]+)\s*\*/%', $old, $om);
	echo "Current version: {$om[1]}\n";

	
	exit;
}

function hlp_dump(){
	global $script;
	echo 
"Usage: {$script} dump [--exclude=table1,table2] [--sz] [site]
  Produces a named, dated, and gzipped SQL database dump.

--exclude : Excludes the listed comma-separated tables
--excludematch : Excludes tables whose names include the listed comma-separated substrings
--include: Include only tables whose names include the listed comma-separated substrings
--sz : Output the dump as an `sz` command to be sent via zmodem
--withdrop : Drop the backed-up tables
--cmd : Show the backup command, but don't execute it
--infix : Add a purposeful string as part of the dump filename
--nolock : skip talbe locking and use a transaction
";
}

function cmd_dump(){
	global $flags, $database, $db_prefix, $user, $password;
	$tables = array();
	connect();
	$res = mysql_list_tables($database);
	$exclude_tables = array();
	$exclude_match = array();
	$include_tables = array();
	if(isset($flags['exclude'])) {
		$exclude_tables = explode(',', $flags['exclude']);
	}
	if(isset($flags['include'])) {
		$include_tables = explode(',', $flags['include']);
	}
	if(isset($flags['excludematch'])) {
		$exclude_match = explode(',', $flags['excludematch']);
	}
	while ($table = mysql_fetch_row($res)) {
		$addok = true;
		if(in_array($table[0], $exclude_tables)) {
			$addok = false;
		}
		if($db_prefix != '' && strpos($table[0], $db_prefix) !== 0) {
			$addok = false;
		}
		foreach($exclude_match as $match) {
			if(strpos($table[0], $match) !== false) {
				$addok = false;
				break;
			}
		}
		foreach($include_tables as $match) {
			if(strpos($table[0], $match) === false) {
				$addok = false;
				break;
			}
			else {
				$included_tables[] = $table[0];
			}
		}
		if($addok) {
			$tables[] = $table[0];
		}
	}

	if(isset($flags['infix'])) {
		$infix = $flags['infix'] . '_';
	}
	else {
		$infix = '';
	}
	$outfile = "{$database}_" . $infix . date('Y-m-d_H-i') . '.sql.gz';

	if($password != '') {
		$passwordln = " -p{$password}";
	}
	else {
		$passwordln = '';
	}
	if(isset($flags['nolock'])) {
		$passwordln .= ' --skip-lock-tables --single-transaction';
	}
	if(count($tables)) {
		$cmd = "mysqldump -u{$user}{$passwordln} {$database} " . implode(' ', $tables) . " | gzip > {$outfile}";
	}
	else {
		$cmd = "mysqldump -u{$user}{$passwordln} {$database} | gzip > {$outfile}";
	}

	if(isset($flags['withdrop'])) {
		foreach($included_tables as $match) {
			echo "DROP TABLE {$match}; ";
		}
		echo "\n";
	}

	if(isset($flags['cmd'])) {
		echo "{$cmd}\n";
	}
	else {
		$result = shell_exec($cmd);
		if(file_exists($outfile)) {
			if(isset($flags['sz'])) {
				$cmd = "sz {$outfile}"; 
				echo $outfile;
			}
			else {
				echo "{$outfile}\n";
			}
		}
		else {
			echo "Error during dump.\n";
		}
	}
}

function hlp_mysql(){
	global $script;
	echo 
"Usage: {$script} mysql [site]
  Displays the connection information for the database.
  Wrap this command in `backticks` to connect automatically.
";
}

function cmd_mysql(){
	global $flags, $database, $db_prefix, $user, $password;
	connect();
	if($password != '') {
		echo "mysql -u{$user} -p{$password} {$database}\n";
	}
	else {
		echo "mysql -u{$user} {$database}\n";
	}
}

function hlp_deletetables(){
	global $script;
	echo 
"Usage: {$script} deletetables [site]
  Deletes the tables in the database
  Wrap this command in `backticks` to connect automatically.
";
}

function cmd_deletetables(){
	global $flags, $database, $db_prefix, $user, $password;
	connect();

	$sql = 'SHOW TABLES;';

	$qry = mysql_query($sql);
	if($err = mysql_error()) {
		echo "There was an error listing the tables: {$err}\n";
		exit;
	}
	while($row = mysql_fetch_array($qry)) {
		$table = reset($row);
		echo "DROP TABLE {$table}\n;"; 
		mysql_query("DROP TABLE {$table}"); 
	}
}

function hlp_query(){
	global $script;
	echo 
"Usage: {$script} query \"SQL\" [site]
  Executes the SQL query on the selected site and displays the results.
";
}

function cmd_query(){
	global $flags, $database, $db_prefix, $user, $password, $args;
	connect();

	$sql = $args[1];
	echo "QUERY: {$sql}\n";

	$qry = mysql_query($sql);
	if(is_resource($qry)) {
		$oa = array();
		while($row = mysql_fetch_array($qry, MYSQL_ASSOC)){
			$oa[] = $row;
		}
		as_table($oa);
	}
	elseif($qry) {
		$rows = mysql_affected_rows();
		echo "Query succeeded. {$rows} affected rows.\n";
	}
	else {
		$err = mysql_error();
		echo "Query failed: {$err}\n";
	}
}

function hlp_search(){
	global $script;
	echo 
"Usage: {$script} search [--tables=table1,table2,...] [--show=table1,table2,...] criteria [site]
  Searches for criteria in every table in the site's database.

--tables : Show results only from the named tables
--show : Display the matching rows from the table
--nocivi : Skip tables with names that start with \"civi\"
";
	
}

function cmd_search(){
	global $flags, $database, $db_prefix, $user, $password, $args;
	connect();

	$search = $args[1];

	$sql = 'SHOW TABLES;';

	$qry = mysql_query($sql);
	if($err = mysql_error()) {
		echo "There was an error listing the tables: {$err}\n";
		exit;
	}
	if(isset($flags['tables'])) {
		$tables = explode(',', $flags['tables']);
	}
	$oa = array();
	while($row = mysql_fetch_array($qry)) {
		$table = reset($row);
		if(isset($tables) && !in_array($table, $tables)) {
			continue;
		}
		if(isset($flags['nocivi']) && strstr($table, 'civi') === 0 ) {
			continue;
		}


		$sql = "SHOW COLUMNS FROM `$table`";
		$result = mysql_query($sql);

		$field_names = array();
		while($field = mysql_fetch_array($result)) {
			if(strpos($field['Type'], 'varchar') !== false || strpos($field['Type'], 'text') !== false) {
				$name = $field['Field'];
				$field_names[$name] = $field['Type'];
			}
		}

		$sql = "SHOW INDEX FROM `$table` WHERE Key_name = 'PRIMARY'";
		$result = mysql_query($sql);
		$primary_key = null;
		if($pkrow = mysql_fetch_object($result)) {
			$primary_key = $pkrow->Column_name;
		} 
		else {
			continue;
		}

		if(count($field_names) > 0){
			if(isset($flags['show']) && in_array($table, explode(',', $flags['show']))) {
				$sql = "SELECT * FROM `{$table}` WHERE 0";
			}
			else {
				$sql = "SELECT count(*) FROM `{$table}` WHERE 0";
			}
			foreach($field_names as $field => $type) {
				$sql .= " OR `{$table}`.`{$field}` LIKE '%{$search}%'";
			}

			$result = mysql_query($sql);
			if(isset($flags['show']) && in_array($table, explode(',', $flags['show']))) {
				$oa2 = array();
				if(isset($flags['fields'])) {
					$showfields = explode(',', $flags['fields']);
					while($row = mysql_fetch_assoc($result)) {
						$nrow = array();
						foreach($showfields as $f) {
							$nrow[$f] = $row[$f];
						}
						$oa2[] = $nrow;
					}
				}
				else { 
					while($row = mysql_fetch_assoc($result)) {
						$oa2[] = $row;
					}
				}
				echo "Table `{$table}`:\n";
				as_table($oa2);
			}
			else {
				$count = reset(mysql_fetch_assoc($result));
			}
			if(isset($count) && $count > 0) {
				$oa[] = array('Table' => $table, 'Matching Rows' => $count);
			}
		}
	}
	as_table($oa);
	
}

function r($v, $s, $r) {
	if(is_array($v)) {
		$a = $v;
		foreach($v as $k=>$n) {
			$a[$k] = r($n, $s, $r);
		}
		return $a;
	}
	elseif(is_object($v)) {
		throw new Exception("Could not replace on object: \n" . print_r($v,1));
	}
	else {
		return str_replace($s, $r, $v);
	}
}

function hlp_revisionize(){
	global $script;
	echo 
"Usage: {$script} revisionize [site]
  Turns on revisions for every content type.
";
	
}

function cmd_revisionize(){
	global $flags, $database, $db_prefix, $user, $password, $args;
	connect();

	$sql = 'SELECT * FROM variable WHERE name LIKE "node_options_%";';

	$qry = mysql_query($sql);
	if($err = mysql_error()) {
		echo "There was an error getting the list of affected content types: {$err}\n";
		exit;
	}
	$cts = array();
	while($row = mysql_fetch_object($qry)) {
		$value = unserialize($row->value);
		if(array_search('revision', $value) === false) {
			$value[]='revision';
			$row->value = serialize($value);
			$sql = "UPDATE variable SET value = '{$row->value}' WHERE name = '{$row->name}';";
			mysql_query($sql);
			preg_match('#node_options_(.+)$#', $row->name, $matches);
			$cts[] = $matches[1];
		}
	}
	if(count($cts) == 0) {
		echo "All content types already have revisions enabled.\n"; 
	}
	else {
		echo "These content types now revisions enabled: " . implode("\n", $cts) . "\n";
	}
}

function hlp_decomment(){
	global $script;
	echo 
"Usage: {$script} decomment [site]
  Turns off comments for every content type and every node.
";
	
}

function cmd_decomment(){
	global $flags, $database, $db_prefix, $user, $password, $args;
	connect();

	$sql = 'SELECT * FROM variable WHERE name LIKE "node_options_%";';

	$qry = mysql_query($sql);
	if($err = mysql_error()) {
		echo "There was an error getting the list of affected content types: {$err}\n";
		exit;
	}
	while($row = mysql_fetch_object($qry)) {
		preg_match('#node_options_(.+)$#', $row->name, $matches);
		$ct = $matches[1];
		$sql = "INSERT INTO variable (name, value) VALUES ('comment_{$ct}', 's:1:\"0\";') ON DUPLICATE KEY UPDATE value='s:1:\"0\";';"; 
		mysql_query($sql);
	}
	$sql = "UPDATE node set comment = 0;"; 
	mysql_query($sql);
	echo "Commenting has been disabled site-wide.\n";
}

function hlp_replace(){
	global $script;
	echo 
"Usage: {$script} replace [--tables=table1,table2,...] [--sql] criteria replacement [site]
  Searches for criteria in every table in the site's database and replaces the value with the replacement.

--tables : Show results only from the named tables
--sql : Show the SQL used to perform the replacement
--nocivi : Skip tables with names that start with \"civi\"
";
	
}

function cmd_replace(){
	global $flags, $database, $db_prefix, $user, $password, $args;
	connect();

	$search = $args[1];
	$replace = $args[2];

	$sql = 'SHOW TABLES;';

	$qry = mysql_query($sql);
	if($err = mysql_error()) {
		echo "There was an error listing the tables: {$err}\n";
		exit;
	}
	if(isset($flags['tables'])) {
		$tables = explode(',', $flags['tables']);
	}
	$oa = array();
	$sqls = array();
	while($row = mysql_fetch_array($qry)) {
		$table = reset($row);
		if(isset($tables) && !in_array($table, $tables)) {
			continue;
		}
		if(isset($flags['nocivi']) && strstr($table, 'civi') === 0 ) {
			continue;
		}
		
		$sql = "SHOW INDEX FROM `$table` WHERE Key_name = 'PRIMARY'";
		$result = mysql_query($sql);
		if($pkrow = mysql_fetch_object($result)) {
			$primary_key = $pkrow->Column_name;
		} 
		else {
			continue;
		}

		$sql = "SHOW COLUMNS FROM `$table`";
		$result = mysql_query($sql);

		$field_names = array();
		while($field = mysql_fetch_array($result)) {
			if(strpos($field['Type'], 'varchar') !== false || strpos($field['Type'], 'text') !== false) {
				$name = $field['Field'];
				$field_names[$name] = $field['Type'];
			}
		}

		if(count($field_names) > 0){
			$sql = "SELECT * FROM `{$table}` WHERE 0";
			foreach($field_names as $field => $type) {
				$sql .= " OR `{$table}`.`{$field}` LIKE '%{$search}%'";
			}

			$result = mysql_query($sql);

			while($r = mysql_fetch_array($result)) {
				foreach($field_names as $field => $type) {
					$v = @unserialize($r[$field]);
					$serial = true;
					if($v === false && $r[$field] != serialize(false)) {
						$v = $r[$field];
						$serial = false;
					}
					try{
						$nv = r($v, $search, $replace, $table);
						if($serial) {
							$nv = serialize($nv);
						}
						if($v != $nv) {
							$nv = mysql_escape_string($nv);
							$sql = "UPDATE `{$table}` SET `{$field}` = '{$nv}' WHERE {$primary_key} = '{$r[$primary_key]}';";
							$sqls[] = $sql;
							if(!isset($flags['test'])) {
								mysql_query($sql);
							}
						}
					}
					catch (Exception $e) {
						echo "Problem replacing on {$table}.{$field} key value = '{$r[$primary_key]}'\n";
						//echo $e->getMessage();
					}
				}
			}
		}
	}
	if(isset($flags['sql'])) {
		echo implode("\n", $sqls);
	}
	else {
		$count = count($sqls);
		echo "\nSearch for: {$search}\nReplace with:{$replace}\nOccurrances:{$count}\n";
	} 
}

function hlp_uncache() {
	global $script;
	echo 
"Usage: {$script} uncache [site]
  Removes all rows from the cache tables of the current database. 
";

}

function cmd_uncache() {
	global $flags, $database, $db_prefix, $user, $password, $args;
	connect();

	$sql = "SHOW TABLES LIKE 'cache%';";

	$qry = mysql_query($sql);
	if($err = mysql_error()) {
		echo "There was an error listing the tables: {$err}\n";
		exit;
	}
	while($row = mysql_fetch_array($qry)) {
		$table = reset($row);
		mysql_query("TRUNCATE `{$table}`;");
		mysql_query("OPTIMIZE `{$table}`;");
	}
	mysql_query("TRUNCATE `watchdog`;");
	mysql_query("OPTIMIZE `watchdog`;");

	echo "Truncated and optimized cache tables.\n";
}


function hlp_optimize() {
	global $script;
	echo 
"Usage: {$script} uncache [site]
  Runs OPTIMIZE on all of the database tables. 
";

}

function cmd_optimize() {
	global $flags, $database, $db_prefix, $user, $password, $args;
	connect();

	$sql = "SHOW TABLES;";

	$qry = mysql_query($sql);
	if($err = mysql_error()) {
		echo "There was an error listing the tables: {$err}\n";
		exit;
	}
	while($row = mysql_fetch_array($qry)) {
		$table = reset($row);
		mysql_query("OPTIMIZE `{$table}`;");
	}

	echo "Optimized all tables.\n";
}

function hlp_masquerade(){
	global $script;
	echo 
"Usage: {$script} masquerade [--uid=number | --user=username] [--ip=ip_address] [site]
  Grants your current session access to the site as the specified user.
  If no specific user or uid is supplied, uid #1 is used.

--uid : The userid to masquerade as.
--user : The username to masquerade as.
--ip : The IP address of the session to modify.
";
	
}

function cmd_m(){
	return cmd_masquerade();
}

function cmd_masquerade(){
	global $flags, $database, $db_prefix, $user, $password, $args;
	connect();
	
	if(isset($flags['ip'])) {
		$myip = $flags['ip'];
	}
	else {
		$options = array(@$_ENV['SSH_CLIENT'], @$_SERVER['SSH_CLIENT']);
		$options = array_filter($options);
		if(count($options) > 0) {
			list($myip) = explode(' ', reset($options));
			if(preg_match('/\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}/', $myip, $matches)) {
				$myip = $matches[0];
			}
		}
		else {
			echo "Your current IP address could not be determined from the environment.  Use the --ip switch to specify an IP.\n";
			exit;
		}
	}

	if(isset($flags['uid'])) {
		$uid = $flags['uid'];
	}
	else {
		$uid = 1;
	}
	if(isset($flags['user'])) {
		$sql = "SELECT * FROM users WHERE name LIKE '{$flags['user']}';";

		$qry = mysql_query($sql);
		$row = mysql_fetch_object($qry);
		if(!$row) {
			echo "The specified user '{$flags['user']}' does not exist.\n";
			exit;
		}
		$uid = $row->uid;
	}
	$cmd = "SELECT count(*) as ct FROM sessions WHERE hostname = '{$myip}';";
	$qry = mysql_query($cmd);
	if($row = mysql_fetch_object($qry)) {
		if($row->ct > 0) {
			$cmd = "UPDATE sessions SET uid = {$uid} WHERE hostname = '{$myip}';";
			$qry = mysql_query($cmd);
			echo "The session with your IP address ({$myip}) has been associated with user #{$uid}.\n";
		}
		else {
			echo "There is no record of your IP address ({$myip}) in the sessions table.\nPlease load the site once, then execute this command.\n";
		}
	}
	
}

function hlp_restore(){
	global $script;
	echo 
"Usage: {$script} restore sqlbackupfile [site]
  Restores the sqlbackupfile to the selected site.
  sqlbackupfile may be gzipped, as produced by the dump command.
";	
}

function cmd_restore(){
	global $flags, $database, $db_prefix, $user, $password, $args;
	connect();

	$restore = $args[1];
	
	$passwordln = ($password == '') ? '' : " -p{$password}";
	if(preg_match('%\.gz$%', $restore)) {
		$cmd = "gunzip -c {$restore} | mysql -u{$user} {$passwordln} {$database}\n";
	}
	else {
		$cmd = "mysql -u{$user} {$passwordln} {$database} < {$restore}\n";
	}
	passthru($cmd);
	echo "Restored database from dump.\n";
}

function hlp_modules(){
	global $script;
	echo 
"Usage: {$script} modules [--csv] [site]
  Lists the modules that are active on the site.
  
--csv : Outputs the module list as CSV, with the first row as column headers
";	
}

function cmd_modules(){
	global $flags, $database, $db_prefix, $user, $password, $args, $site;
	connect();

	$sql = "select * from system where type = 'module' and status=1 order by substr(filename, 1, 7) asc, name asc;";

	$qry = mysql_query($sql);
	$last_section = '';
	$oa = array();
	while($row = mysql_fetch_object($qry)) {
		$ss = explode('/', $row->filename);
		switch($ss[0]) {
			case 'modules':
				$section = 'core';
				break;
			case 'sites':
				$section = $ss[1];
				break;
		}
		if($section != $last_section) {
			if(count($oa) > 0 && !isset($flags['csv'])) {
				as_table($oa);
				$oa = array();
			}
			$last_section = $section;
		}
		if (isset($row->info)) {
			// Drupal 6+ info.
			$info = unserialize($row->info);
		} elseif (file_exists($filename = $site.'/../../'.str_replace('.module', '.info', $row->filename))) {
			// Drupal 5 info file.
			$info = parse_ini_file($filename);
			if($info['version'][0] != '5') {
				$info['version'] = 'mismatch';
			}
		}
		$version = isset($info['version']) ? $info['version'] : 'unknown';
		$package = isset($info['package']) ? $info['package'] : 'Other';
		if(isset($flags['csv'])) {
			$outputrow = array( 'Section' => ucfirst($section), 'Name' => $row->name, 'Version' => $version, 'Package' => $package);
		}
		else {
			$outputrow = array( ucfirst($section) =>$row->name, 'Version' => $version, 'Package' => $package);
		}
		if(isset($flags['htdocs'])) {
			if(file_exists($flags['htdocs'] . '/' . $row->filename)) {
				$outputrow['File Exists'] = 'true';
			}
			else {
				$outputrow['File Exists'] = 'false';
			}
		}
		$oa[] = $outputrow;
	}
	if(count($oa) > 0 && !isset($flags['csv'])) {
		as_table($oa);
	}
	if(isset($flags['csv'])) {
		echo implode(',', array_keys(reset($oa))) . "\n";
		foreach($oa as $row) {
			echo implode(',', $row) . "\n";
		}
	}
}

function hlp_disable(){
	global $script;
	echo 
"Usage: {$script} disable [--package] [module] [site]
  Disabled the specified modules.

--package : Uses the specified module name as a package and disables all modules from that package
";	
}

function cmd_disable(){
	global $flags, $database, $db_prefix, $user, $password, $args, $site;
	connect();
	
	$command = array_shift($args);
	$name = array_shift($args);
	if(strpos($name, ',')) {
		$names = explode(',', $name);
	}
	else {
		$names = array($name);
	}
	$enames = array_map('mysql_escape_string', $names);
	$or = '';
	foreach($enames as $n) {
		$or = $or . ' or name like "{$name}" ';
	}
	if(isset($flags['package'])) {
		$or = '';
	}

	$sql = "select * from system where type='module' and (1=1 {$or}) order by name asc;";
	$qry = mysql_query($sql);
	$oa = array();
	while($row = mysql_fetch_object($qry)) {
		$disable = false;
		if (isset($row->info)) {
			// Drupal 6+ info.
			$info = unserialize($row->info);
		} elseif (file_exists($filename = $site.'/../../'.str_replace('.module', '.info', $row->filename))) {
			// Drupal 5 info file.
			$info = @parse_ini_file($filename);
		}
		$package = isset($info['package']) ? $info['package'] : 'Other';
		$outputrow = array( 'Name' => $row->name, 'Package' => $package);
		
		if(isset($flags['package'])) {
			if(in_array($package, $names) ) {
				$disable = true;
			}
		}
		else {
			if(in_array($row->name, $names) ) {
				$disable = true;
			}
		}

		if($disable) {
			$dodisable = mysql_escape_string($row->name);
			$sql = "update system set status = 0 where name like '{$dodisable}';";
			mysql_query($sql);
			$oa[] = $outputrow;
		}
	}
	if(count($oa) > 0) {
		echo "Disabled:\n";
		as_table($oa);
	}
	else {
		echo "Nothing to do.\n";
	}
}

function hlp_enable(){
	global $script;
	echo 
"Usage: {$script} enable [--package] [module] [site]
  Enable the specified modules.

--package : Uses the specified module name as a package and enables all modules from that package
";	
}

function cmd_enable(){
	global $flags, $database, $db_prefix, $user, $password, $args, $site;
	connect();
	
	$command = array_shift($args);
	$name = array_shift($args);
	if(strpos($name, ',')) {
		$names = explode(',', $name);
	}
	else {
		$names = array($name);
	}
	$enames = array_map('mysql_escape_string', $names);
	$or = '';
	foreach($enames as $n) {
		$or = $or . ' or name like "{$name}" ';
	}
	if(isset($flags['package'])) {
		$or = '';
	}

	$sql = "select * from system where type='module' and (1=1 {$or}) order by name asc;";
	$qry = mysql_query($sql);
	$oa = array();
	while($row = mysql_fetch_object($qry)) {
		$enable = false;
		if (isset($row->info)) {
			// Drupal 6+ info.
			$info = unserialize($row->info);
		} elseif (file_exists($filename = $site.'/../../'.str_replace('.module', '.info', $row->filename))) {
			// Drupal 5 info file.
			$info = @parse_ini_file($filename);
		}
		$package = isset($info['package']) ? $info['package'] : 'Other';
		$outputrow = array( 'Name' => $row->name, 'Package' => $package);
		
		if(isset($flags['package'])) {
			if(in_array($package, $names) ) {
				$enable = true;
			}
		}
		else {
			if(in_array($row->name, $names) ) {
				$enable = true;
			}
		}

		if($enable) {
			$doenable = mysql_escape_string($row->name);
			$sql = "update system set status = 1 where name like '{$doenable}';";
			mysql_query($sql);
			$oa[] = $outputrow;
		}
	}
	if(count($oa) > 0) {
		echo "Enabled:\n";
		as_table($oa);
	}
	else {
		echo "Nothing to do.\n";
	}
}

function hlp_adminpass(){
	global $script;
	echo 
"Usage: {$script} adminpass newpassword [--md5] [site]
  Updates the password of the user with uid #1 to newpassword.

--md5 : The supplied newpassword is an MD5 hash
";
}

function cmd_adminpass(){
	global $flags, $database, $db_prefix, $user, $password, $args;
	connect();
	
	$adminpass = $args[1];

	$sql = "SELECT pass FROM users WHERE uid = 1;";

	$qry = mysql_query($sql);
	$pass = mysql_fetch_assoc($qry);
	$pass = $pass['pass'];

	if(isset($flags['md5'])) {
		$cmd = "UPDATE users SET pass='{$adminpass}' WHERE uid = 1;";
	}
	else {
		$cmd = "UPDATE users SET pass=md5('{$adminpass}') WHERE uid = 1;";
	}
	$qry = mysql_query($cmd);

	echo "Updated the password of the admin user.\nThe previous MD5 hash was: {$pass}\nThis can be restored using the --md5 switch.\n";
}

function hlp_update(){
	global $script;
	echo 
"Usage: {$script} update [--force]
  Updates this script.
  
--force : Forces the update whether the version is newer or not.
";
}

function cmd_update(){
	global $flags, $args;

	$new = file_get_contents('https://sol.rockriverstar.com/svn/server_scripts/trunk/dtool');
	if($new == '') {
		echo "There was a problem reaching the update site.\n";
		exit;
	}
	$saveok = false;
	if(isset($flags['force'])) {
		$saveok = true;
		echo "Forcing an update.\n";
	}
	$old = file_get_contents(__FILE__);
	
	preg_match('%/\*\s*VERSION:\s*([0-9.]+)\s*\*/%', $new, $nm);
	preg_match('%/\*\s*VERSION:\s*([0-9.]+)\s*\*/%', $old, $om);
	
	switch(version_compare($om[1], $nm[1])) {
		case -1:
			$saveok = true;
			echo "Updated.\n";
			break;
		case 0:
			echo "Current version is in use.\n";
			break;
		case 1:
			echo "Newer version is in use.\n";
			break;
	}
	file_put_contents(__FILE__, $new);
}

function hlp_dbcreate() {
	global $script;
	echo 
"Usage: {$script} dbcreate
  Builds a script to create a Drupal database and assign permissions to it based on the settings file.

Sample Usage: {$script} dbcreate | mysql -uroot
";
}

function cmd_dbcreate() {
	global $flags, $database, $db_prefix, $user, $password;

	connect(false);

	if($user == 'root') {
		$file = 'SELECT "PLEASE FIX THE settings.php FILE SO THAT IT DOESNT RESET THE ROOT PASSWORD";';
	}
	else {
		$file = <<< DB_CREATE
CREATE DATABASE IF NOT EXISTS {$database};
GRANT ALL ON {$database}.* TO {$user}@'localhost' IDENTIFIED BY '{$password}';

DB_CREATE;
	}

	echo $file;
}

function cmd_install() {
	$module = $args[1];
	$version = '6.x';
	$url = 'http://updates.drupal.org/release-history/' . $module . '/' . $version;
}

function hlp_auth() {
	global $script;
	echo 
"Usage: {$script} auth username [site] [--password=newpassword] 
  Grants http_auth via the auth database on this server to the user specified.
  Where [site] is the part of the domain in front of the \".staging.rockriverstar.com\".

Sample Usage: {$script} auth clientuser clientsite --password=goodpwd
";
}


function cmd_auth() {
	global $flags, $args;

	$conn = @mysql_connect('localhost', 'root', '');
	if(!$conn) {
		echo "Could not connect to the auth database as the root user with no password.\n";
		exit;
	}
	mysql_select_db('auth');

	$newuser = $args[1];
	$site = $args[2];
	$newpass = @$flags['password'];

	if($newpass != '') {
		$result = mysql_query("INSERT INTO user_info (user_name, user_password) VALUES ('{$newuser}', md5('{$newpass}')) ON DUPLICATE KEY UPDATE user_password = md5('{$newpass}');");
		echo "Updated http_auth password for {$newuser}.\n";
	}

	if($site != '') {
		$result = mysql_query("INSERT INTO user_group (user_name, user_group) VALUES ('{$newuser}', '{$site}');");
		echo "Granted {$newuser} access to {$site}.\n";
	}
}

function cmd_dl() {
	global $flags, $database, $db_prefix, $user, $password, $args;
	connect();
	
	$module = $args[1];
	$version = isset($flags['drupal_version']) ? $flags['drupal_version'] : '6.x';

	$xdata = file_get_contents('http://updates.drupal.org/release-history/' . $module  . '/' . $version);
	
	$xml = new SimpleXMLElement($xdata);

	print_r($xml->title);

	echo "\n";

	//http://updates.drupal.org/release-history/cck/6.x
}


function hlp_newsite() {
	global $script;
	echo 
"Usage: {$script} newsite domain site docroot 
  Creates a new drupal subdomain on the specified docroot.
  
domain - the FQD of the new site, ie \"d1.training.rockriverstar.com\"
site - the name of the site directory, ie \"d1\"
docroot - the full docroot of the existing drupal install, ie \"/var/www/vhosts/drupal620/www\"

Sample Usage: sudo {$script} newsite rrs.staging.rockriverstar.com rrs /var/www/vhosts/drupal620/www
";
}


function cmd_newsite(){
	global $flags, $args;
	$domain = $args[1];
	$site = $args[2];
	$www = $args[3];
	
	if($_SERVER['USER'] != 'root') {
		echo "This command must be executed as root, and you are {$_SERVER['USER']}.\n";
		exit;
	}

	$e = shell_exec('ifconfig eth0');
	preg_match('%inet addr:([0-9.]+)%', $e, $matches);
	$localip = $matches[1];
	
	$prototype_vhost = file_get_contents('/etc/apache2/sites-available/prototype');
	$prototype_vhost = str_replace('{$domain}', $domain, $prototype_vhost);
	$prototype_vhost = str_replace('{$site}', $site, $prototype_vhost);
	$prototype_vhost = str_replace('{$docroot}', "/var/www/vhosts/{$site}/www", $prototype_vhost);
	$prototype_vhost = str_replace('{$serverip}', $localip, $prototype_vhost);
	
	file_put_contents('/etc/apache2/sites-available/' . $domain, $prototype_vhost);
	
	$dbpass = '';
	$chars = 'ASDFGHJKLZXCVBNNMQWERYEUIOPasdfghjklzxcvbnmqwertyuiop0123456789';
	for($z = 0; $z < 10; $z++) {
		$dbpass .= $chars[rand(0, strlen($chars)-1)];
	}
	
	$settings = <<< END_SETTINGS
<?php

\$db_url = 'mysql://{$site}:{$dbpass}@localhost/{$site}';
\$db_prefix = '';
\$databases = array();
\$databases['default']['default'] = array(
	'driver' => 'mysql',
	'database' => '{$site}',
	'username' => '{$site}',
	'password' => '{$dbpass}',
	'host' => 'localhost',
	'prefix' => '',
);

\$drupal_hash_salt = 'this is my fancy salt';

\$update_free_access = true;

ini_set('arg_separator.output',     '&amp;');
ini_set('magic_quotes_runtime',     0);
ini_set('magic_quotes_sybase',      0);
ini_set('session.cache_expire',     200000);
ini_set('session.cache_limiter',    'none');
ini_set('session.cookie_lifetime',  2000000);
ini_set('session.gc_maxlifetime',   200000);
ini_set('session.save_handler',     'user');
ini_set('session.use_only_cookies', 1);
ini_set('session.use_trans_sid',    0);
ini_set('url_rewriter.tags',        '');

END_SETTINGS;

	$script = <<< END_SCRIPT
cd /var/www/vhosts
mkdir -p {$site}/site
chmod ug+ws {$site}/site
chown -R :www-data {$site}
ln -s {$www} {$site}/www
ln -s /var/www/vhosts/{$site}/site {$site}/www/sites/{$domain}
ln -s /etc/apache2/sites-available/{$domain} /etc/apache2/sites-enabled/{$domain}

END_SCRIPT;

	$cmds = explode("\n", $script);
	foreach($cmds as $cmd) {
		shell_exec($cmd);
	}

	file_put_contents("/var/www/vhosts/{$site}/site/settings.php", $settings);
	
	mysql_connect('localhost', 'root', '');
	mysql_query("CREATE DATABASE IF NOT EXISTS {$site};");
	mysql_query("GRANT ALL ON {$site}.* TO {$site}@'localhost' IDENTIFIED BY '{$dbpass}';");
	
	shell_exec('/etc/init.d/apache2 restart');

	echo "New site and database created.
Install drupal for this site at: http://{$domain}/install.php\n";
}

function hlp_drush() {
	global $script;
	echo 
"Usage: {$script} drush [site]
  Shows the drush command that will work with this Drupal installation
";
}

function cmd_drush(){
	global $flags, $args;
	array_shift($args);

die('Yeah, this command doesn\'t work yet.');

	$args = implode(' ', $args);
	
	$r = 	'';
	
	$e = shell_exec('ifconfig eth0');
	preg_match('%inet addr:([0-9.]+)%', $e, $matches);
	$localip = $matches[1];
}

function cmd_longtags(){
	global $flags, $args;
	$file = $args[1];

	if($file == '') {
		$files = glob('*.php');
	}
	else {
		$files = array($file);
	}

	foreach($files as $file) {
		if(is_dir($file)) {
			continue;
		}

		$content = file_get_contents($file);
		$tokens = token_get_all($content);
		$output = '';
	
		$found = false;
		if(isset($flags['debug'])) {
			print_r($tokens);
		}
		foreach($tokens as $token) {
			if(is_array($token)) {
				list($index, $code, $line) = $token;
				switch($index) {
					case T_OPEN_TAG_WITH_ECHO:
						$output .= '<?php echo ';
						$found = true;
						break;
					case T_OPEN_TAG:
						$output .= '<?php ';
						$found = $found || strcasecmp($code, '<?php') == 0;
						break;
					default:
						$output .= $code;
						break;
				}
				
			}
			else {
				$output .= $token;
			}
		}
	
		if($content != $output) {
			file_put_contents($file, $output);
			echo "$file\n";
		}
		elseif(isset($flags['debug'])) {
			echo "No shorttags found in $file\n";
		}
	}
}

function hlp_move() {
	global $script;
	echo 
"Usage: {$script} move relative_docroot [site] 
  Attempts to change the directory references in the system table to point to the correct place.

relative_docroot - a directory name to add to the current working directory that points to the drupal instance's apache document root

";
}


function cmd_move() {
	global $flags, $args;
	connect();

	$www = $args[1];
	$path = '/' . trim(getcwd() . '/' . $www, '/') . '/';

	$sql = "select * from system where status=1 order by name asc;";

	$qry = mysql_query($sql);
	$last_section = '';
	$oa = array();
	while($row = mysql_fetch_object($qry)) {
		if(file_exists($path . $row->filename)) {
			$outputrow = array( 'Module' => $row->name, 'Action' => 'Found', 'Location' => '');
		}
		else {
			$outputrow = array( 'Module' => $row->name, 'Action' => 'Needs Moved', 'Location' => $path . $row->filename);
		}
		$oa[] = $outputrow;
	}
	echo as_table($oa);

}


?>